name: build-release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to release from'     
        required: true
        default: 'master'
jobs:
  build-multiplatform:
    env:
      install_dest: ${{ github.workspace }}/llvm-project/build_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    # Get runner core count
    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v1
      id: cpu-cores
    - name: Build Information
      run: echo "Installing to ${{env.install_dest}} with {{ steps.cpu-cores.outputs.count }} cores"
    # Checkout p2llvm repo and setup environment
    - uses: actions/checkout@v3
      with:
        repository: RileyMcCarthy/p2llvm-build-fix
        ref: ${{ github.event.inputs.branch }}
        submodules: recursive
    # Build llvm
    - name: Create install directory
      run: mkdir -p ${{ github.workspace }}/llvm-project/build
    - name: Configure llvm cmake
      working-directory: ${{ github.workspace }}/llvm-project/build
      run: cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=${{env.install_dest}} -DLLVM_ENABLE_PROJECTS="lld;clang" -DCMAKE_BUILD_TYPE=Release -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=P2 -DLLVM_TARGETS_TO_BUILD="" ../llvm
    - name: Build LLVM
      working-directory: ${{ github.workspace }}/llvm-project/build
      run: make install -j${{ steps.cpu-cores.outputs.count }}
    # Build libp2
    - name: Create libp2 build directory
      run: mkdir -p ./libp2/build
    - name: Configure libp2
      working-directory: ./libp2/build
      run: cmake -Dllvm=${{env.install_dest}}/bin ../
    - name: Build libp2
      working-directory: ./libp2/build
      run: make LLVM=${{env.install_dest}} -j${{ steps.cpu-cores.outputs.count }}
    # Build libp2++
    - name: Create libp2++ build directory
      run: mkdir -p ./libp2++/build
    - name: Configure libp2++
      working-directory: ./libp2++/build
      run: cmake -Dllvm=${{env.install_dest}}/bin ../
    - name: Build libp2++
      working-directory: ./libp2++/build
      run: make LLVM=${{env.install_dest}} -j${{ steps.cpu-cores.outputs.count }}
    # Build libc
    - name: Create libc build directory
      run: mkdir -p ./libc/build
    - name: Configure libc
      working-directory: ./libc/build
      run: cmake -Dllvm=${{env.install_dest}}/bin ../
    - name: Build libc
      working-directory: ./libc/build
      run: make LLVM=${{env.install_dest}} -j${{ steps.cpu-cores.outputs.count }}
    # Archiving build
    - name: Zip Release
      run: zip -r "p2llvm-${{ github.event.inputs.branch }}-${{ runner.os }}-${{ runner.arch }}.zip" ./llvm-project/build_release
    - name: Archive results
      uses: actions/upload-artifact@v3
      with:
        name: "p2llvm-${{ github.event.inputs.branch }}-${{ runner.os }}-${{ runner.arch }}"
        path: "p2llvm-${{ github.event.inputs.branch }}-${{ runner.os }}-${{ runner.arch }}.zip"
  create-release:
    needs: build-multiplatform
    runs-on: windows-latest
    steps:
    - name: Create artifact dir
      run: mkdir -p ./artifacts
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
    - uses: ncipollo/release-action@v1
      with:
        artifacts: "./artifacts/*"
        makeLatest: true
